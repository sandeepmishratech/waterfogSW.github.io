{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"For The Record","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Factory Pattern 생성패턴의 한 종류 객체를 생성하는 공장(Factory) image 위와 같이 Animal을 상속받는 Dog, Cat클래스가 존재한다고 가정합니다. 함수는 인자로 받은 type에 따라 Cat을 생성해서 반환하거나, Dog를 생성해서 반환해 줍니다. 팩토리 패턴의 장점? 어떠한 상황에서는 객체 생성과정이 복잡할 수 있는데, 이러…","fields":{"slug":"/CS/Factory/"},"frontmatter":{"date":"March 23, 2022","title":"[Design Pattern]Factory Pattern","category":"CS","draft":false}}},{"node":{"excerpt":"Goal StringBuilder와 StringBuffer의 차이 StringBuilder, StringBuffer StringBuilder, StringBuffer 둘다 mutable한 객체이며 데이터 변경이 빈번한 경우에 성능면에서 유리합니다. 하지만 둘사이에는 약간의 차이가 존재합니다. StringBuffer StringBuffer는 데이터 변경시 …","fields":{"slug":"/Java/StringBufferStringBuilder/"},"frontmatter":{"date":"March 21, 2022","title":"[Java] StringBuilder vs StringBuffer","category":"Java","draft":false}}},{"node":{"excerpt":"컬렉션 프레임 워크는 데이터 군을 저장하는 클래스를 표준화한 프레임워크로, 데이터를 저장하는 자료구조와 알고리즘을 클래스로 구현해놓은것입니다.\n제네릭과 다형성을 이용한 객체지향 설계로 표준화 되어있어 사용법을 익히기도 편리하며, 재사용성이 높은 코드를 작성할 수 있다는 장점이 있습니다. image 컬렉션 프레임워크 인터페이스 컬렉션 프레임 워크에는 대표적…","fields":{"slug":"/Java/collectionFramework/"},"frontmatter":{"date":"January 08, 2022","title":"[Java] Collection Framework","category":"Java","draft":false}}},{"node":{"excerpt":"Java 추상클래스와 인터페이스 Goal 추상클래스와 인터페이스에 대한 이해 추상클래스(Abstract Class) 추상클래스는 구현부가 없어 인스턴스를 생성할 수 없고, 상속을 통한 자손클래스로만 구현이 가능합니다. 이러한 추상클래스의 존재이유는 객체지향 설계의 추상 개념과 맞닿아 있습니다.  추상 개념은 구체적인 사물들의 공통적인 특징을 파악해서 이를…","fields":{"slug":"/Java/abstract_interface/"},"frontmatter":{"date":"January 01, 2022","title":"[Java] 추상클래스와 인터페이스","category":"Java","draft":false}}},{"node":{"excerpt":"Goal Facade 패턴에대한 이해 SRP원칙에 대한 이해 SRP : 단일 책임 원칙(Single responsibility principle) 객체는 변화해야 할 단 한가지 이유만을 가져야 합니다. 쉽게 생각하면 변경이 있을때 파급 효과가 적다면, 즉 수정해야 할 코드가 적다면 단일 책임 원칙을 잘 따른것이라 볼 수 있습니다. 다음과 같이 SRP위반 …","fields":{"slug":"/CS/SRP_Facade/"},"frontmatter":{"date":"December 29, 2021","title":"[Design Pattern]Facade 패턴을 통한 SRP원칙 준수","category":"CS","draft":false}}},{"node":{"excerpt":"정적 팩터리 메서드와 생성자는 선택적 매개변수가 많을때 적절히 대응하기 어렵다는 제약이 있습니다. 이럴때 프로그래머들은 점층적 생성자 패턴을 즐겨 사용하였습니다. 1. Telescoping constructor pattern 점층적 생성자 패턴은 n개의 매개변수를 가지는 클래스에 대해 선택 매개변수를 1개 받는 생성자, 2개받는 생성자, … n개 받는 생…","fields":{"slug":"/CS/Builder/"},"frontmatter":{"date":"December 25, 2021","title":"[Design Pattern]Builder Pattern을 사용하는 이유","category":"CS","draft":false}}},{"node":{"excerpt":"Definition Singleton의 사전적 의미는 외동, 카드 패에서 한장만 있는것을 지칭하는 말입니다.\n이러한 사전적 의미와 비슷하게, Singleton Pattern은 객체를 하나만 생성하도록 제한하기 위해 사용하는 디자인 패턴입니다. 생성패턴의 종류 추상 팩토리 패턴(Abstract Factory Pattern) 빌더 패턴(Builder Patt…","fields":{"slug":"/CS/Singletone/"},"frontmatter":{"date":"December 19, 2021","title":"[Design Pattern]Singleton Pattern","category":"CS","draft":false}}},{"node":{"excerpt":"운영체제가 관리해야 할 자원은 크게 물리적인 자원과 추상적인 자원으로 구분할 수 있습니다. 운영체제에서 커널의 역할은 CPU나 메모리와 같은 물리적인 자원을 사용자에게 태스크와 세그먼트, 페이지와 같은 추상적인 자원으로 추상화 하여 사용자에게 인터페이스를 제공하는것입니다. 덕분에 우리는 메모리 레이아웃, 스케줄러, 네트워킹 등과 같은 시스템의 세부 구현 …","fields":{"slug":"/CS/Linux Kernel Structure/"},"frontmatter":{"date":"November 17, 2021","title":"[OS] Linux Kernel Structure","category":"CS","draft":false}}},{"node":{"excerpt":"SpringBoot와 React를 연동하여 간단한 Rest API서버를 구현해 보았습니다.  Spring Controller 우선 Spring에서는  대신 를 사용하였는데 가 주로 View를 반환하기 위해 사용되는것과 달리 는 Json형태로 객체 데이터를 반환하기 위해 사용됩니다. Spring - controller CORS (Cross-Origin Re…","fields":{"slug":"/BackEnd/Spring-React/"},"frontmatter":{"date":"October 28, 2021","title":"[Spring] SpringBoot-React 연동","category":"BackEnd","draft":false}}},{"node":{"excerpt":"LRU LRU는 Least Recently Used의 약자로 페이지 폴트가 발생하게 되면 가장 오래전에 접근했던 페이지를 퇴출시켜 공간을 확보합니다. 버퍼에 존재하는 페이지에 접근하는 경우 리스트의 head로 페이지를 이동시킵니다. 이러한 방식으로 최근에 접근한 페이지 일수록 head에 가깝게, 오래전에 접근한 페이지일수록 tail에 가까이 위치하게 됩니…","fields":{"slug":"/CS/2Q/"},"frontmatter":{"date":"September 12, 2021","title":"[OS] 2Q - A low overhead high-performance buffer management replacement algorithm","category":"CS","draft":false}}},{"node":{"excerpt":"AWS인스턴스 Kafka설치 AWS 인스턴스에서 1. AWS EC2인스턴스 생성 보안그룹 -> 인바운드 규칙 2181 포트 개방 : 주키퍼 기본 포트 9092 포트 개방 : 카프카 브로커 기본포트 인스턴스 접속 2. 인스턴스 자바 설치(jdk-11) 3. 카프카 브로커 다운로드 4. 카프카 브로커 설정 힙메모리 설정 카프카 브로커의 경우 힙메모리가 1Gb…","fields":{"slug":"/BackEnd/kafka/"},"frontmatter":{"date":"August 15, 2021","title":"[Kafka] Kafka설치","category":"BackEnd","draft":false}}},{"node":{"excerpt":"토픽 생성 를 통해 토픽 관련 명령을 실행할 수 있다.  create 토픽을 생성하는 명령어 bootstrap-server 토픽을 생성할 카프카 클러스터를 구성하는 브로커 IP와 Port를 적는다. partitions 파티션의 개수를 지정한다. 옵션을 명시하지 않으면, 카프카 브로커의 설정파일의 옵션을 따른다. replication-factor 토픽의 파…","fields":{"slug":"/BackEnd/kafkaCMD/"},"frontmatter":{"date":"August 15, 2021","title":"[Kafka] Kafka 커맨드라인 툴","category":"BackEnd","draft":false}}},{"node":{"excerpt":"몇달전만 하더라도 wsl환경에서 openssh를 실행하면 별다른 포트포워딩 없이 외부에서 접속할 수 있었던것 같았는데.. 오늘 해보려니 갑자기 안되었다. image wsl콘솔에서 ifconfig명령어를 실행하였을때 라는 내부 아이피 주소를 사용하는것을 확인할 수 있었습니다. 저는 iptime공유기를 사용하므로 에 해당하는 주소가 나올거라 생각했는데 그렇지…","fields":{"slug":"/OpenSource/wsl2_openssh/"},"frontmatter":{"date":"August 10, 2021","title":"[WSL] open-ssh설정(WSL 내부아이피 포트포워딩)","category":"OpenSource","draft":false}}},{"node":{"excerpt":"JAVA 객체지향 프로그래밍 2 1. 상속 1.1 상속의 정의 조상 클래스 : 부모(parent), 상위(super), 기반(base) 클래스 자손 클래스 : 자식(child), 하위(sub), 파생(derived) 클래스 자바에서 상속은 다음과 같이 키워드 를 통해 구현한다. 자손 클래스는 조상 클래스의 모든 멤버를 상속받기 때문에 Child클래스는 P…","fields":{"slug":"/Java/java_OOP2/"},"frontmatter":{"date":"August 02, 2021","title":"[Java] 객체지향 프로그래밍 - 2","category":"Java","draft":false}}},{"node":{"excerpt":"JAVA 객체지향 프로그래밍 1. 객체지향 이론, 언어 객체지향 이론 객체 지향 이론은 ‘실제 세계는 사물(객체)로 이루어져 있으며 발생하는 모든 사건들은 사물간의 상호작용이다.‘를 기본개념으로 한다. 객체 지향 이론은 상속, 캡슐화, 추상화 개념을 중심으로 발전하였다. 객체지향 언어 코드의 재사용성이 높다. 새로운 코드를 작성할 때 기존의 코드를 이용하…","fields":{"slug":"/Java/java_OOP1/"},"frontmatter":{"date":"August 01, 2021","title":"[Java] 객체지향 프로그래밍 - 1","category":"Java","draft":false}}},{"node":{"excerpt":"데이터 처리속도와 처리량의 한계로 인해 전통적인 RDBMS 데이터베이스와 다른 새로운 데이터베이스가 요구되었습니다. 이로인해 NoSQL(Not only SQL)과 NewSQL과 같은 데이터 베이스들이 등장하였습니다. RocksDB의 특징 LSM-tree를 기반으로하여 대용량의 데이터를 저장하는데(write intensive workload)에 적합합니다 …","fields":{"slug":"/OpenSource/RDBusecases/"},"frontmatter":{"date":"July 27, 2021","title":"[RocksDB] RocksDB 활용사례","category":"OpenSource","draft":false}}},{"node":{"excerpt":"MongoDB의 GridFS문서를 참고하여 작성하였습니다. MongoDB에서는 대용량의 파일을 저장하기 위해서 GridFS를 사용합니다. GridFS는 큰 바이너리 파일을 라 불리는 여러 작은 파일들로 나누어 MongoDB에 저장합니다.  When to Use Grid FS 다음의 몇가지 상황에서 DB에 데이터를 저장하는것이 System-level의 파일…","fields":{"slug":"/BackEnd/MDB_GridFs/"},"frontmatter":{"date":"July 18, 2021","title":"[MongoDB] GridFS","category":"BackEnd","draft":false}}},{"node":{"excerpt":"YCSB(Yahoo! Cloud Serving Benchmark)는 NoSQL 데이터베이스의 쿼리 테스트를 위한 오픈소스 벤치마킹툴입니다. Load vs Run YCSB에서의 명령어는 데이터베이스에 데이터를 생성하며, 은 데이터베이스에서 가능한 명령어를 수행합니다. 즉, 명령은 insert 연산만을 수행하며, 의경우 YCSB의 workload에 따라 re…","fields":{"slug":"/OpenSource/YCSB/"},"frontmatter":{"date":"July 18, 2021","title":"[YCSB] Introduction","category":"OpenSource","draft":false}}},{"node":{"excerpt":"title: ”MongoDB GridFS”\n MongoDB의 공식문서를 참고하여 작성하였습니다. MongoDB는 레코드를 BSON(Binary JSON)형태의 Document를 사용하는 NoSQL데이터베이스입니다. Document Database SQL Record MongoDB Document Key : Value 형태 여기서 name, age, sta…","fields":{"slug":"/BackEnd/MDBIntro/"},"frontmatter":{"date":"July 12, 2021","title":"[MongoDB] Introduction","category":"BackEnd","draft":false}}},{"node":{"excerpt":"What is Bloom Filter? 수많은 양의 정보가 저장된 데이터베이스에서 해당 데이터가 존재하는지 확인하는 작업에는 부하가 뒤따릅니다. 이를 위해 선형탐색을 사용한다면 너무나 오랜 시간이 소요될 것입니다. 이진 탐색도 좋은 방법이지만 더 나은 방법이 있을 것 같습니다. 이렇게 어떤 집합에 특정원소가 있는지 확인하는 작업을 이라고 합니다. 이러한 …","fields":{"slug":"/CS/BloomFilter/"},"frontmatter":{"date":"July 09, 2021","title":"[DataStructure] Bloom filter","category":"CS","draft":false}}},{"node":{"excerpt":"깃허브의  repo의 install.md를 참고하였습니다. Dependecies 먼저 의존성 패키지를 설치합니다. Install 깃에서 RocksDB를 클론합니다. 다음으로 make를 해주어야하는데 나 은 디버그 모드로 컴파일하고, 는 rocksdb를 릴리즈 모드로 컴파일 합니다. RocksDB 깃허브의 설치 가이드에는 릴리즈 모드인 로 설치하기를 권장하…","fields":{"slug":"/OpenSource/RDBInstall/"},"frontmatter":{"date":"July 09, 2021","title":"[RocksDB] RocksDB Install","category":"OpenSource","draft":false}}},{"node":{"excerpt":"Mendel Rosenblum, author of The Design and Implementation of a Log-Structured File system LFS는 많은 synchronous random write를 작은 asynchronous sequential write로 전환하여 raw disk bandwidth를 100% 활용 하는것이 기본 …","fields":{"slug":"/CS/LFS/"},"frontmatter":{"date":"July 06, 2021","title":"[OS] Log-Structured File system","category":"CS","draft":false}}},{"node":{"excerpt":"CPU Cache 캐시는 용량이 작고, 빠른 특성때문에 자주사용되는 데이터를 주로 저장합니다 Temporal locality(시간 지역성) 마지막에 접근한 데이터를 다시 접근하는 특성을 말합니다. stack, for loop Spatial locality(공간 지역성) 접근한 데이터의 주변 데이터를 다시 접근하는 특성을 말합니다. Array, sequen…","fields":{"slug":"/CS/MultiprocessorScheduling/"},"frontmatter":{"date":"July 06, 2021","title":"[OS] Multiprocessor Scheduling","category":"CS","draft":false}}},{"node":{"excerpt":"CPU vs FPGA 보통 CPU 벤치마킹은 실행 시간과 실행 속도를 명시하지만 FPGA 성능은 데이터 처리량을 기준으로 하기 때문에 CPU와 FPGA를 단순 비교하기는 어렵습니다. 예를 들어 CPU에는 각각 2.4GHz로 실행되는 4개의 코어가 존재하지만, FPGA는 62MHz로 상대적으로 속도 측면에서 CPU에 비해 상당히 느리게작동하는것처럼 보입니다…","fields":{"slug":"/Hetero/Introduction of FPGA acceleration/"},"frontmatter":{"date":"July 06, 2021","title":"[FPGA]Introduction of FPGA acceleration","category":"Hetero","draft":false}}},{"node":{"excerpt":"What is FPGA? Field Programmable은 장치를 언제 어디서나 프로그래밍 할 수 있음을 뜻합니다. Gate Array는 논리 게이트의 규칙적인 배열을 의미합니다. FPGA에서는 논리게이트들의 interconnect로 기능을 구현할 수 있습니다.  FPGA vs ASIC Reporgrammable design 또는 prototype을 만…","fields":{"slug":"/Hetero/Introduction of FPGA/"},"frontmatter":{"date":"July 06, 2021","title":"[FPGA]Introduction of FPGA","category":"Hetero","draft":false}}},{"node":{"excerpt":"KCC 2021 학회 후기 질문 후기 인터랙티브 VR에관한 논문 발표가 있었습니다.\n해당논문은 진동과 임팩트를 통해 햅틱 피드백을 생성할 수 있는 다중감각 햅틱장치를 구현하고 물리엔젠과 실제 충돌 데이터를 결합한 햅틱 방법론을 제시하였습니다.\n논문의 결과로 9명의 남성 3명의 여성으로 총 12명의 피실험자를 대상으로 탁구, 당구, 테니스 세 종목에 이러한…","fields":{"slug":"/Essay/KCC2021-Review/"},"frontmatter":{"date":"July 01, 2021","title":"[Review] KCC 2021 학회 후기","category":"Essay","draft":false}}},{"node":{"excerpt":"RocksDB 1. Introduction What is RocksDB? RocksDB는 Facebook사에서 개발한 LSM(Log Structured Merge)기반의 No SQL데이터 베이스 저장 엔진입니다. 정보 통신 기술의 발전으로 전 세계의 데이터 생산량이 기하 급수적으로 증가하였고, 이에따라 기존의 관계형 데이터베이스(RDBMS)보다 대용량의 …","fields":{"slug":"/OpenSource/RDBIntro/"},"frontmatter":{"date":"July 01, 2021","title":"[RocksDB] Introduction","category":"OpenSource","draft":false}}},{"node":{"excerpt":"CPU Scheduling 많은 프로세스가 동시에 자원을 요구할 때 어떤 프로세스가 CPU를 먼저 사용할지 결정하는 정책을 말합니다. Workload (작업부하) 프로세스가 얼마나 많은 양의 자원을 요구하느냐 Simple assumtion about porcess 각 작업은 같은 시간동안 수행된다 모든 작업은 같은 시간에 시작된다 한번 시작되면 완료될때 …","fields":{"slug":"/CS/Scheduler/"},"frontmatter":{"date":"March 14, 2021","title":"[OS] Scheduler","category":"CS","draft":false}}},{"node":{"excerpt":"RAM disk vs Disk Performance evaluation RAM vs Disk DRAM과 DISK모두 저장장치의 역할을 하지만 각각이 가지고 있는 특징이 다르기 때문에 서로 다른 용도로 사용이 됩니다. DRAM의 경우 속도가 뛰어나지만 가격이 높고, 휘발성이 있어 데이터가 영구적으로 저장되지 못한다는 특징이 있습니다. 또 바이트 단위로 데이…","fields":{"slug":"/CS/Ramdisk, Disk성능비교/"},"frontmatter":{"date":"March 08, 2021","title":"[OS] RAM disk vs Disk Performance evaluation","category":"CS","draft":false}}},{"node":{"excerpt":"MySQL이란? MySQL은 관계형 데이터베이스 관리 시스템(RDBMS: Relational DBMS)으로 오픈 소스이며, 다중 사용자와 다중 스레드를 지원합니다. C언어, C++, JAVA, PHP 등 여러 프로그래밍 언어를 위한 다양한 API를 제공하고 있습니다. MySQL 서버 및 클라이언트 설치 MySQL Server는 DBMS로 server를 이…","fields":{"slug":"/BackEnd/Mysql-in-WSL/"},"frontmatter":{"date":"March 02, 2021","title":"[MySql] WSL에서 mysql사용환경 만들기","category":"BackEnd","draft":false}}},{"node":{"excerpt":"2.1 Kernels CUDA에서는 C++의 함수를 지원하는데 이를 kernel이라 합니다. kernel 은 __ global __ 이라는 specifier를 통해 정의하며 선언시 다음과 같은 형식을 따릅니다. 상기 코드의 main함수에서 VecAdd()라는 이름의 kernel을 사용하는것을 확인 하실수 있는데 C++의 일반적인 함수들과 달리 <<<…, …","fields":{"slug":"/Hetero/CudaProgrammingModel/"},"frontmatter":{"date":"February 21, 2021","title":"[CUDA]Programming Model","category":"Hetero","draft":false}}}]}},"pageContext":{}}}