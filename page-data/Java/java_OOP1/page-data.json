{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/java_OOP1/","result":{"data":{"site":{"siteMetadata":{"title":"For The Record","author":"San Kim","siteUrl":"https://waterfogsw.github.io","comment":{"disqusShortName":"","utterances":"waterfogSW/waterfogSW.github.io"}}},"markdownRemark":{"id":"5c514c85-e0e8-5ce0-8a81-bd7cb8d8bffa","excerpt":"JAVA 객체지향 프로그래밍…","html":"<h1 id=\"java-객체지향-프로그래밍\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"java 객체지향 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[JAVA] 객체지향 프로그래밍</h1>\n<h2 id=\"1-객체지향-이론-언어\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9D%B4%EB%A1%A0-%EC%96%B8%EC%96%B4\" aria-label=\"1 객체지향 이론 언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 객체지향 이론, 언어</h2>\n<h3 id=\"객체지향-이론\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9D%B4%EB%A1%A0\" aria-label=\"객체지향 이론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 이론</h3>\n<p>객체 지향 이론은 ‘실제 세계는 사물(객체)로 이루어져 있으며 발생하는 모든 사건들은 사물간의 상호작용이다.‘를 기본개념으로 한다.<br>\n객체 지향 이론은 상속, 캡슐화, 추상화 개념을 중심으로 발전하였다.</p>\n<h3 id=\"객체지향-언어\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%96%B8%EC%96%B4\" aria-label=\"객체지향 언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 언어</h3>\n<ol>\n<li>\n<p>코드의 재사용성이 높다.</p>\n<ul>\n<li>새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>코드의 관리가 용이하다.</p>\n<ul>\n<li>코드간 관계를 이용하여 적은 노력으로 쉽게 코드를 변경할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>신뢰성 높은 프로그래밍을 가능하게 한다.</p>\n<ul>\n<li>제어자와 메서드를 이용하여 데이터를 보호하고 올바른 값을 유지하도록 하며, 코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지할 수 있다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-클래스-객체\" style=\"position:relative;\"><a href=\"#2-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B0%9D%EC%B2%B4\" aria-label=\"2 클래스 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 클래스, 객체</h2>\n<ul>\n<li>클래스 : 객체를 정의해 놓은것, 객체를 생성할 때 사용된다.</li>\n<li>객체(인스턴스) : 실제로 존재하는 것, 사물 또는 개념</li>\n</ul>\n<h3 id=\"21-객체의-구성요소\" style=\"position:relative;\"><a href=\"#21-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"21 객체의 구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 객체의 구성요소</h3>\n<ul>\n<li>속성 : member variable, attribute, field, state</li>\n<li>기능 : method, function, behavior</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tv</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// member variable</span>\n   <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">boolean</span> power<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> channel<span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// method</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>power <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>power<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">void</span> channelUp <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">channelDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">--</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TvTest</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Tv</span> t<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// t : Tv인스턴스를 참조하기위한 변수 t</span>\n      t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 인스턴스 생성</span>\n      t<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n      t<span class=\"token punctuation\">.</span><span class=\"token function\">channelDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>📋 자바 명명 규칙 가이드</p>\n<ol>\n<li>Class, Interface : 명사여야 하며 대문자로 시작하여야 한다.</li>\n<li>Method : 동사여야하며, 소문자로 시작한다. 붙이는 단어의 경우 붙이는 단어 첫문자를 대문자로 쓴다. ex) isFunny(){}</li>\n<li>변수 : 소문자로 시작하며, 두글자 이상을 권장한다.</li>\n<li>상수 : 모든 글자에 대문자를 사용한다. </li>\n<li>패키지 : 모든 글자를 소문자로 사용한다. </li>\n</ol>\n</blockquote>\n<h3 id=\"22-인스턴스-생성시-메모리-구조\" style=\"position:relative;\"><a href=\"#22-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"22 인스턴스 생성시 메모리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 인스턴스 생성시 메모리 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">| color         | &lt;-지역변수-> &lt;--0x100-->\n| power         |\n| channel       | \n| power()       | &lt;--메서드-->\n| channelUp()   |\n| channelDown() |</code></pre></div>\n<h3 id=\"23-인스턴스-생성-및-사용\" style=\"position:relative;\"><a href=\"#23-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%82%AC%EC%9A%A9\" aria-label=\"23 인스턴스 생성 및 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 인스턴스 생성 및 사용</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">Tv t;</code></p>\n<ul>\n<li>참조 변수 t를 위한 공간 생성</li>\n</ul>\n</li>\n<li><code class=\"language-text\">t = new Tv();</code></li>\n<li>연산자 new에 의해 인스턴스가 메모리의 빈공간에 할당.</li>\n<li>멤버변수는 각 자료형의 기본값으로 초기화</li>\n<li>생성된 인스턴스의 주소값은 참조변수 t에 저장(t를 통해 객체에 접근 가능)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Tv</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Tv</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"3\">\n<li>\n<p><code class=\"language-text\">t2 = t1</code></p>\n<ul>\n<li>t1는 참조변수이므로 인스턴스의 주소를 저장하고있다.</li>\n<li>t2는 대입연산자에 의해 t1의 주소를 t2에 저장한다.</li>\n<li>기존 t2가 가리키고 있던 인스턴스(객체)는 참조변수가 하나도 없게 된다.</li>\n<li>이러한 인스턴스는 Garbage Collector에 의해 자동적으로 메모리에서 제거된다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"24-프로그래밍-관점에서의-클래스에대한-정의\" style=\"position:relative;\"><a href=\"#24-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EB%8C%80%ED%95%9C-%EC%A0%95%EC%9D%98\" aria-label=\"24 프로그래밍 관점에서의 클래스에대한 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 프로그래밍 관점에서의 클래스에대한 정의</h3>\n<p>객체지향이론의 관점에서 클래스는 <code class=\"language-text\">객체를 생성하기 위한 틀로 속성과 기능</code>으로 정의되어있다. </p>\n<p>프로그래밍적 관점에서의 클래스는 다음과 같은 발전과정을 거쳤다.  </p>\n<blockquote>\n<p>변수 -> 배열 -> 구조체(자료형이 다른 변수) -> 클래스(구조체 + 함수)</p>\n</blockquote>\n<p>함수는 많은 경우에 있어데이터를 가지고 작업을 하기 때문에 데이터와 함수는 관계가 깊다. 따라서 자바와 같은 객체지향 언어에서는 변수와 함수를 하나의 클래스에 정의하여 서로 관계가 깊은 변수와 함수들을 함께 다룰 수 있게 하였다.</p>\n<p>다음과 같이 클래스의 멤버 변수를 직접 접근하지 않고 get(), set()메서드를 통해 접근하게 하면, 보다 정확한 데이터를 유지하는데 도움이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> hour<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getHour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">setHour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-변수와-메서드\" style=\"position:relative;\"><a href=\"#3-%EB%B3%80%EC%88%98%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"3 변수와 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 변수와 메서드</h2>\n<h3 id=\"31-선언-위치에-따른-변수의-종류\" style=\"position:relative;\"><a href=\"#31-%EC%84%A0%EC%96%B8-%EC%9C%84%EC%B9%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EB%B3%80%EC%88%98%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"31 선언 위치에 따른 변수의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 선언 위치에 따른 변수의 종류</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Variable</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> cv<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 클래스 변수</span>\n   <span class=\"token keyword\">int</span> iv<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 인스턴스 변수</span>\n\n   <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> lv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 지역변수 </span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>위치</th>\n<th>생성 시기</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>클래스변수</td>\n<td>클래스 영역</td>\n<td>클래스가 메모리에 올라갈때</td>\n</tr>\n<tr>\n<td>인스턴스 변수</td>\n<td>클래스 영역</td>\n<td>인스턴스가 생성되었을때</td>\n</tr>\n<tr>\n<td>지역변수</td>\n<td>클래스 영역 이외의 영역</td>\n<td>변수 선언문이 수행되었을 때</td>\n</tr>\n</tbody>\n</table>\n<p><strong>클래스 변수</strong></p>\n<ul>\n<li>인스턴스를 생성하지 않고도 언제든지 사용할 수 있다.</li>\n<li>메모리에 로딩되어 프로그램이 종료될 때 까지 유지된다.</li>\n<li>클래스 변수를 통해 모든 인스턴스가 하나의 저장공간을 공유하게 하여 공통된 값을 갖도록 할 수 있다.</li>\n</ul>\n<p><strong>인스턴스 변수</strong></p>\n<ul>\n<li>인스턴스가 생성될 때 마다 생성되므로 각기 다른 값을 유지할 수 있다.</li>\n</ul>\n<h3 id=\"32-메서드\" style=\"position:relative;\"><a href=\"#32-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"32 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 메서드</h3>\n<p><strong>메서드를 사용하는 이유</strong></p>\n<ol>\n<li>높은 재사용성</li>\n<li>중복된 코드의 제거</li>\n<li>프로그램의 구조화</li>\n<li>\n<p>같은 클래스 내의 메서드 끼리는 참조변수를 사용하지 않고도 서로 호출이 가능하지만, static메서드는 같은 클래스 내의 인스턴스 메서드를 호출할 수 없다.</p>\n<ul>\n<li>인스턴스 변수는 인스턴스가 생성된 후에나 사용할 수 있음.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"33-jvm-메모리-구조\" style=\"position:relative;\"><a href=\"#33-jvm-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"33 jvm 메모리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 JVM 메모리 구조</h3>\n<ol>\n<li>\n<p>Method Area(메서드 영역)</p>\n<ul>\n<li>프로그램 실행 중 어떤 클래스가 사용되면, JVM은 해당 클래스의 클래스 파일을 읽어서 분석하여 클래스에 대한 정보를 이곳에 저장한다. 이때 <strong>클래스 변수</strong>도 이영역에 함께 생성된다.</li>\n</ul>\n</li>\n<li>\n<p>Call Stack(호출 스택)</p>\n<ul>\n<li>메서드의 작업에 필요한 메모리 공간을 제공함. 메서드가 작업을 수행하는 동안 지역 변수, 연산의 중간 결과를 저장하는데 사용되며, 메서드가 반환되면, 메모리공간도 반환되어 비워진다.</li>\n<li><strong>참조변수</strong> 또한 이영역에 저장되어 힙영역의 인스턴스를 가리키는 역할을 한다.</li>\n</ul>\n</li>\n<li>\n<p>Heap(힙)</p>\n<ul>\n<li>인스턴스가 생성되는 공간으로 <strong>인스턴스 변수</strong>가 이곳에 생성된다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"34-매개변수--참조형-기본형\" style=\"position:relative;\"><a href=\"#34-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98--%EC%B0%B8%EC%A1%B0%ED%98%95-%EA%B8%B0%EB%B3%B8%ED%98%95\" aria-label=\"34 매개변수  참조형 기본형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4 매개변수 : 참조형, 기본형</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>              <span class=\"token comment\">// x는 기본형 매개변수</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Data</span> d<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// d(클래스 인스턴스)는 참조형 매개변수</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> add<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// arr(배열)은 참조형 매개변수</span></code></pre></div>\n<p>메서드 호출시 매개변수의 타입이 기본형(primitive type)이면 매개변수의 값이 복사되지만, 참조형(reference type)이면 인스턴스의 주소가 복사된다. </p>\n<p><strong>기본형 매개변수</strong>는 변수의 값을 읽기만 할 수 있지만, <strong>참조형 매개변수</strong>는 변수의 값을 읽고 변경할 수 있다.</p>\n<h2 id=\"4-오버로딩\" style=\"position:relative;\"><a href=\"#4-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\" aria-label=\"4 오버로딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 오버로딩</h2>\n<h3 id=\"41-오버로딩-조건\" style=\"position:relative;\"><a href=\"#41-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9-%EC%A1%B0%EA%B1%B4\" aria-label=\"41 오버로딩 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 오버로딩 조건</h3>\n<ol>\n<li>메서드 이름이 같아야 한다</li>\n<li>매개변수의 개수 또는 타입이 달라야 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3 id=\"42-가변인자-오버로딩\" style=\"position:relative;\"><a href=\"#42-%EA%B0%80%EB%B3%80%EC%9D%B8%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\" aria-label=\"42 가변인자 오버로딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 가변인자 오버로딩</h3>\n<p><code class=\"language-text\">&lt;타입>... 변수명</code>의 형식으로 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PrintStream</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> format<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>가변인자는 매개변수들 중 가장 마지막에 선언되어야 한다.</strong></p>\n<p><strong>가변인자는 내부적으로 배열을 이용한다</strong>. 하지만 매개변수 타입을 배열로 하는것과 달리 인자를 생략할 수도있고, null이나 길이가 0인 배열도 인자로 포함할 수 있다.</p>\n<p>인자로 배열을 사용한 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> <span class=\"token function\">concatenate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token function\">concatenate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token function\">concatencate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token function\">concatenate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>가변인자를 사용한 메서드는 가능하면 오버로딩 하지 않는게 좋다.</strong> 다음과 같은 경우에 에러가 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">concatenate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> delim<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">concatenate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴파일시 두 오버로딩된 메서드가 구분되지 않아 에러가 발생할 수 있다. 따라서 가능하면 가변인자를 사용한 메서드는 오버로딩 하지 않는것이 좋다.</p>\n<h2 id=\"5-생성자\" style=\"position:relative;\"><a href=\"#5-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"5 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 생성자</h2>\n<h3 id=\"51-생성자-기본\" style=\"position:relative;\"><a href=\"#51-%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B8%B0%EB%B3%B8\" aria-label=\"51 생성자 기본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 생성자 기본</h3>\n<ol>\n<li>생성자의 이름은 클래스의 이름과 같아야 한다.</li>\n<li>생성자는 반환 값이 없다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// class name = method(constructor) name</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 클래스에는 하나 이상의 생성자가 정의되어있어야 한다. 하지만 실제로 인스턴스 생성시 생성자 없이도 인스턴스를 생성할 수 있었는데 이는 <code class=\"language-text\">기본 생성자</code> 덕분이다.</p>\n<p>기본생성자는 컴파일러가 자동적으로 추가하는 생성자로, 특별히 인스턴스 초기화 작업이 필요하지 않다면, 기본생성자를 사용하는 것도 좋다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> argsp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Data</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 컴파일 에러 발생 </span>\n      <span class=\"token class-name\">Data</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 <code class=\"language-text\">Data</code>클래스에 대한 인스턴스를 매개변수 없이 생성할때 컴파일 에러가 발생한다. 매개변수가 있는 생성자가 존재하므로 컴파일러는 기본 생성자를 추가하지 않아 매개변수가 없는 생성자는 정의되지 않는다.</p>\n<p>즉 기본 생성자가 컴파일러에 의해서 추가되는 경우는 클래스에 정의된 생성자가 하나도 없을 때 뿐이다.</p>\n<h3 id=\"52-다른-생성자-호출\" style=\"position:relative;\"><a href=\"#52-%EB%8B%A4%EB%A5%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%98%B8%EC%B6%9C\" aria-label=\"52 다른 생성자 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 다른 생성자 호출</h3>\n<ul>\n<li>생성자의 이름으로 클래스이름 대신 this를 사용한다.</li>\n<li>한 생성자에서 다른 생성자를 호출할 때는 반드시 <strong>첫 줄</strong>에서만 호출이 가능하다.</li>\n</ul>\n<p>에러가 발생하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   door <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>수정</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   door <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this</code>는 참조변수로 인스턴스 자신을 가리킨다. 참조변수를 통해 인스턴스의 멤버에 접근할 수 있듯, <code class=\"language-text\">this</code>를 통해 인스턴스 변수에 접근할 수 있다.</p>\n<h3 id=\"53-생성자를-통한-인스턴스-복사\" style=\"position:relative;\"><a href=\"#53-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%B5%EC%82%AC\" aria-label=\"53 생성자를 통한 인스턴스 복사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 생성자를 통한 인스턴스 복사</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">String</span> b<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span> c<span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> ca<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/*\n      a = ca.a;\n      b = ca.b;\n      c = ca.c;\n      */</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>ca<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> ca<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> ca<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기존의 코드를 재활용하는것이 바람직 하다</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"6-변수의-초기화\" style=\"position:relative;\"><a href=\"#6-%EB%B3%80%EC%88%98%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"6 변수의 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 변수의 초기화</h2>\n<h3 id=\"61-초기화-블럭\" style=\"position:relative;\"><a href=\"#61-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B8%94%EB%9F%AD\" aria-label=\"61 초기화 블럭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1 초기화 블럭</h3>\n<p><strong>클래스 초기화 블럭</strong></p>\n<ul>\n<li>클래스 변수의 복잡한 초기화에 사용된다</li>\n<li>클래스 로드시 한번만 수행\n<strong>인스턴스 초기화 블럭</strong></li>\n<li>인스턴스 변수의 복잡한 초기화에 사용된다</li>\n<li>\n<p>인스턴스가 생성될때 마다 수행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 초기화 블럭</span>\n<span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>// 인스턴스 초기화 블럭\n{\n…\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```java\nclass BlockTest {\n   int a;\n   static int[] arr = new int[10];\n   static {\n      for(int i = 0; i &lt; 10; i++) {\n         arr[i] = (int)(Math.random() * 10 + 1);\n      }\n   }\n\n   {\n      a = (int)(Math.random() * 10 + 1);\n   }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class loaded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"번째 차\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Car</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Car</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/28651727/128962438-da6ead9a-09e3-4e39-90f6-4f7744f1956f.png\" alt=\"image\"></p>\n<h3 id=\"62-초기화-시기와-순서\" style=\"position:relative;\"><a href=\"#62-%EC%B4%88%EA%B8%B0%ED%99%94-%EC%8B%9C%EA%B8%B0%EC%99%80-%EC%88%9C%EC%84%9C\" aria-label=\"62 초기화 시기와 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2 초기화 시기와 순서</h3>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>클래스 변수</th>\n<th>인스턴스 변수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>시점</td>\n<td>클래스가 처음 로딩될때 단 한번</td>\n<td>인스턴스가 생성될때마다 인스턴스 별로</td>\n</tr>\n<tr>\n<td>순서</td>\n<td>기본값 -> 명시적 초기화 -> 클래스 초기화 블럭</td>\n<td>기본값 -> 명시적 초기화 ->  인스턴스 초기화 블럭 -> 생성자</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"[Java] 객체지향 프로그래밍 - 1","date":"August 01, 2021"}}},"pageContext":{"slug":"/Java/java_OOP1/","previous":{"fields":{"slug":"/OpenSource/RDBusecases/"},"frontmatter":{"title":"[RocksDB] RocksDB 활용사례"}},"next":{"fields":{"slug":"/Java/java_OOP2/"},"frontmatter":{"title":"[Java] 객체지향 프로그래밍 - 2"}}}}}