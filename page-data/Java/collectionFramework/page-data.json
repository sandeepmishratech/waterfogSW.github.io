{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/collectionFramework/","result":{"data":{"site":{"siteMetadata":{"title":"For The Record","author":"San Kim","siteUrl":"https://waterfogsw.github.io","comment":{"disqusShortName":"","utterances":"waterfogSW/waterfogSW.github.io"}}},"markdownRemark":{"id":"25d7a58f-ce96-52b9-9530-518fddf722e0","excerpt":"컬렉션 프레임 워크는 데이터 군을 저장하는 클래스를 표준화한 프레임워크로, 데이터를 저장하는 자료구조와 알고리즘을 클래스로 구현해놓은것입니다.\n제네릭과 다형성을 이용한 객체지향 설계로 표준화 되어있어 사용법을 익히기도 편리하며, 재사용성이 높은 코드를 작성할 수 있다는 장점이 있습니다. image 컬렉션 프레임워크 인터페이스 컬렉션 프레임 워크에는 대표적으로 다음의 3가지 인터페이스가 존재합니다. List Set Map…","html":"<p>컬렉션 프레임 워크는 데이터 군을 저장하는 클래스를 표준화한 프레임워크로, 데이터를 저장하는 자료구조와 알고리즘을 클래스로 구현해놓은것입니다.\n제네릭과 다형성을 이용한 객체지향 설계로 표준화 되어있어 사용법을 익히기도 편리하며, 재사용성이 높은 코드를 작성할 수 있다는 장점이 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28651727/148642487-97e031a3-ed68-459b-921b-fef31b771cb0.png\" alt=\"image\"></p>\n<h3 id=\"컬렉션-프레임워크-인터페이스\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"컬렉션 프레임워크 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션 프레임워크 인터페이스</h3>\n<p>컬렉션 프레임 워크에는 대표적으로 다음의 3가지 인터페이스가 존재합니다.</p>\n<ul>\n<li>List</li>\n<li>Set</li>\n<li>Map</li>\n</ul>\n<p><code class=\"language-text\">List</code>와 <code class=\"language-text\">Set</code>을 구현한 컬렉션 클래스들은 공통점이 많아 공통된 부분을 <code class=\"language-text\">Collection</code>이라는 새로운 인터페이스로 정의하여 놓았습니다. 반면 <code class=\"language-text\">Map</code>을 구현한 클래스들은 전혀 다른 형태로 컬렉션을 다루기 때문에 <code class=\"language-text\">Collection</code>을 상속하지 않습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Interface</th>\n<th>특징</th>\n<th>구현 클래스</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>List</td>\n<td>순서유지 O, 중복 허용</td>\n<td>ArrayList, LinkedList, Stack, Vector</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>순서유지 X, 중복 불가</td>\n<td>HashSet, TreeSet</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>key-value데이터 집합, 키 중복 X, 값 중복 O</td>\n<td>HashMap, TreeMap, HashTable, Properties</td>\n</tr>\n</tbody>\n</table>\n<p>컬렉션 프레임 워크의 구현클래스들은 인터페이스의 이름을 포함하는 명명법을 따르지만 Vector, Stack, HashTable, Properties와 같은 클래스들은 컬렉션 프레임워크 이전부터 존재하였던 것이기 때문에 컬렉션 프레임워크의 명명법을 따르지 않습니다.</p>\n<p>자바 컬렉션 프레임워크를 사용할 때 List, Set, Map과 같은 인터페이스가 아닌 ArrayList, Vector, HashMap, HashTable과 같은 구현체로 선언할 때가 있는데 이는 객체의 결합도를 매우 강하게 유지하여 비효율적이며, 추상화에 의존해야한다는 SOLID의 DIP원칙을 위반합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Bad usecase</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Good usecase</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Vector</code>, <code class=\"language-text\">HashTable</code>은 Backward Compatibility를 위해 존재하는것으로 가능하면 사용하지 않는것을 권장합니다.</p>\n<h2 id=\"collection\" style=\"position:relative;\"><a href=\"#collection\" aria-label=\"collection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection</h2>\n<p><code class=\"language-text\">Collection</code>은 <code class=\"language-text\">List</code>와 <code class=\"language-text\">Set</code>의 조상 인터페이스로 컬렉션 클래스에 저장된 데이터를 조회하고 추가 삭제하는등의 기본적인 메서드들을 정의하고 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Type &#x26; Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean add(E e)</td>\n<td>객체 e를 컬렉션에 추가한다.</td>\n</tr>\n<tr>\n<td>boolean addAll(Collection&#x3C;? extends E> c</td>\n<td>객체 c의 모든 요소를 컬렉션에 추가한다.</td>\n</tr>\n<tr>\n<td>void clear()</td>\n<td>컬렉션의 모든 요소를 삭제한다.</td>\n</tr>\n<tr>\n<td>boolean contains(Object o)</td>\n<td>컬렉션이 객체 o를 포함하고 있는지 확인합니다.</td>\n</tr>\n<tr>\n<td>boolean containsAll(Collection&#x3C;?> c)</td>\n<td>컬렉션 c의 모든 요소를 컬렉션이 포함하고있는지 확인합니다.</td>\n</tr>\n<tr>\n<td>boolean isEmpty()</td>\n<td>컬렉션이 비어있는지 확인합니다.</td>\n</tr>\n<tr>\n<td>int size()</td>\n<td>컬렉션의 크기를 반환합니다.</td>\n</tr>\n<tr>\n<td>boolean remove(Object o)</td>\n<td>객체 o를 컬렉션에서 찾고, 있다면 삭제합니다.</td>\n</tr>\n<tr>\n<td>boolean removeAll(Collection&#x3C;?> c)</td>\n<td>컬렉션 c에 존재하는 요소를 컬렉션에서 찾아 모두 삭제합니다.</td>\n</tr>\n<tr>\n<td>Object[] toArray()</td>\n<td>컬렉션을 배열로 변환합니다.</td>\n</tr>\n<tr>\n<td>int hashCode()</td>\n<td>컬렉션의 해시값을 반환합니다</td>\n</tr>\n<tr>\n<td>equals(Object o)</td>\n<td>컬렉션 내부의 값을 비교한다.</td>\n</tr>\n<tr>\n<td>Iterator&#x3C;E> iterator()</td>\n<td>컬렉션의 이터레이터를 반환합니다.</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">contains</code>의 경우 구현에 따라 시간복잡도가 달라집니다. <code class=\"language-text\">ArrayList</code>의 경우 O(n)시간에 확인하며, <code class=\"language-text\">HashMap</code>의 경우 O(log n)의 시간에 확인합니다.</p>\n<p><code class=\"language-text\">equals</code>의 경우 내부의 값을 비교하는데, 값의 순서가 달라도 <code class=\"language-text\">false</code>를 반환합니다. 따라서 값의 포함 여부를 확인하고 싶으면 <code class=\"language-text\">contains</code>를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            list3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        list3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"list-interface\" style=\"position:relative;\"><a href=\"#list-interface\" aria-label=\"list interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Interface</h2>\n<p><code class=\"language-text\">List</code>인터페이스는 중복을 허용하고 저장순서가 유지되는 자료구조를 가집니다. <code class=\"language-text\">Collection</code>인터페이스를 상속합니다.</p>\n<p>순서가 유지되는 만큼 인덱스로 데이터에 접근할 수 있는 메서드들이 존재합니다.</p>\n<table>\n<thead>\n<tr>\n<th>Type &#x26; Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void add(int index, E element)</td>\n<td>index위치에 요소를 삽입합니다.</td>\n</tr>\n<tr>\n<td>void addAll(int index,Collection c)</td>\n<td>index위치에 컬렉션c의 데이터들을 모두 삽입합니다.</td>\n</tr>\n<tr>\n<td>int indexOf(Object o)</td>\n<td>객체 o의 index를 반환합니다.</td>\n</tr>\n<tr>\n<td>boolean remove(int index)</td>\n<td>index위치의 요소를 삭제합니다.</td>\n</tr>\n<tr>\n<td>E set(int index, E element)</td>\n<td>index 위치의 요소를 element로 대체하고 반환합니다</td>\n</tr>\n<tr>\n<td>void sort(Comparator c)</td>\n<td>비교자 c를 통해 컬렉션을 정렬합니다</td>\n</tr>\n<tr>\n<td>List&#x3C;E> subList(int fromIndex, int toIndex)</td>\n<td>fromIndex부터 toIndex에 있는 요소를 반환합니다</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://user-images.githubusercontent.com/28651727/148644066-394cb4ef-bb7c-49af-8846-821eba448255.png\" alt=\"image\"></p>\n<p>다음의 구현 클래스를 가집니다.</p>\n<ul>\n<li>ArrayList</li>\n<li>LinkedList</li>\n<li>Vector</li>\n<li>Stack</li>\n</ul>\n<h3 id=\"arraylist-vs-linkedlist\" style=\"position:relative;\"><a href=\"#arraylist-vs-linkedlist\" aria-label=\"arraylist vs linkedlist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ArrayList vs LinkedList</h3>\n<p><code class=\"language-text\">ArrayList</code>의 경우 저장공간이 부족하면, 현재사이즈 * 2만큼의 새로운 저장공간을 확보한 후 데이터를 추가합니다. 반면, <code class=\"language-text\">LinkedList</code>의 경우 저장공간을 따로 확보하는것이 아니라 새로운 노드를 생성하여 연결하는 방식입니다. 따라서 충분한 공간을 확보해 준다면 순차적인 추가/삭제는 <code class=\"language-text\">ArrayList</code>가 더 빠릅니다.</p>\n<p>반면 중간의 데이터를 추가/삭제하는 경우 <code class=\"language-text\">ArrayList</code>는 모든 요소를 재배치해야 하기 때문에 <code class=\"language-text\">LinkedList</code>에 비해 속도가 느립니다.</p>\n<p><code class=\"language-text\">ArrayList</code>의 경우 사용하지 않는 공간도 할당 될 수 있기 때문에 메모리 사용이 비효율적이라는 단점이 있으며, <code class=\"language-text\">LinkedList</code>의 경우 각 요소들이 연결되어있는 형태이기 때문에 데이터가 많을수록 읽어오는 시간이 길어진다는 단점이 있습니다.</p>\n<h3 id=\"stack\" style=\"position:relative;\"><a href=\"#stack\" aria-label=\"stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack</h3>\n<p><img src=\"https://user-images.githubusercontent.com/28651727/148645619-68e6a897-58f3-440d-8f73-e8afc03b04dc.png\" alt=\"image\"></p>\n<p><code class=\"language-text\">Stack</code>클래스는 <code class=\"language-text\">Vector</code>클래스를 상속하며, Last In First Out의 자료구조입니다. </p>\n<table>\n<thead>\n<tr>\n<th>Type &#x26; Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean empty()</td>\n<td>스택이 비어있는지 확인합니다</td>\n</tr>\n<tr>\n<td>E peek()</td>\n<td>Top의 값을 반환합니다</td>\n</tr>\n<tr>\n<td>E pop()</td>\n<td>Top의 값을 pop합니다</td>\n</tr>\n<tr>\n<td>E push(E item)</td>\n<td>Top에 데이터 요소를 추가합니다</td>\n</tr>\n<tr>\n<td>int search(Object o)</td>\n<td>가장 아래에서부터 객체의 위치를 찾아 반환합니다</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> animals<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        animals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Horse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack: \"</span> <span class=\"token operator\">+</span> animals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Search an element</span>\n        <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> animals<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Horse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Position of Horse: \"</span> <span class=\"token operator\">+</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Stack: [Dog, Horse, Cat]\nPosition of Horse: 2</code></pre></div>\n<h2 id=\"queue-interface\" style=\"position:relative;\"><a href=\"#queue-interface\" aria-label=\"queue interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Queue Interface</h2>\n<p><code class=\"language-text\">Queue</code>인터페이스는 <code class=\"language-text\">Collection</code>인터페이스를 상속하며 First In First Out의 자료구조입니다.</p>\n<table>\n<thead>\n<tr>\n<th>Type &#x26; Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean add(E e)</td>\n<td>e 요소를 tail에 추가합니다</td>\n</tr>\n<tr>\n<td>Object peek()</td>\n<td>head의 값을 반환합니다</td>\n</tr>\n<tr>\n<td>Object poll()</td>\n<td>head의 값을 반환하고 삭제합니다</td>\n</tr>\n<tr>\n<td>boolean offer(Object o)</td>\n<td>객체o를 저장하며, 성공여부를 반환합니다</td>\n</tr>\n<tr>\n<td>Object element()</td>\n<td>peek과 같은 역할이나, 큐가 비어있을 경우 NoSuchElementException을 발생시킵니다</td>\n</tr>\n<tr>\n<td>Object remove()</td>\n<td>poll과 같은 역할이나, 큐가 비어있을 경우 NoSuchElementException을 발생시킵니다</td>\n</tr>\n</tbody>\n</table>\n<p>구현체는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">ArrayDequeue</code></li>\n<li><code class=\"language-text\">LinkedList</code></li>\n<li>\n<p><code class=\"language-text\">PriorityQueue</code></p>\n<ul>\n<li>저장한 순서에 관계없이 우선순위가 높은 것부터 꺼내는 형태로, 힙 자료구조 형태로 저장합니다. </li>\n</ul>\n</li>\n</ul>\n<p>이외에도 <code class=\"language-text\">Queue</code>인터페이스를 상속하는 다음과 같은 인터페이스들이 있습니다</p>\n<ul>\n<li>\n<p>Deque</p>\n<ul>\n<li>기존의 큐와 달리 앞뒤로 삽입 삭제를 할 수 있습니다.</li>\n</ul>\n</li>\n<li>BlockingQueue</li>\n<li>BlockingDeque</li>\n</ul>\n<h2 id=\"set-interface\" style=\"position:relative;\"><a href=\"#set-interface\" aria-label=\"set interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set Interface</h2>\n<p><code class=\"language-text\">List</code>인터페이스와 동일하게 <code class=\"language-text\">Set</code>인터페이스도 <code class=\"language-text\">Collection</code>인터페이스를 상속합니다. 하지만 중복 요소를 허용하지 않으며, 저장순서 또한 유지되지 않습니다.</p>\n<ul>\n<li>\n<p>HashSet</p>\n<ul>\n<li><code class=\"language-text\">HashSet</code>은 Set인터페이스를 구현한 가장 대표적인 컬렉션입니다. <code class=\"language-text\">add</code>나 <code class=\"language-text\">addAll</code>메서드를 통해 새로운 요소를 추가하며, 중복된 요소를 허용하지 않기 위해 <code class=\"language-text\">equals</code>를 호출하여 중복된 요소가 컬렉션 내에 존재하는지 확인합니다. </li>\n<li><code class=\"language-text\">HashSet</code>은 저장된 순서를 유지하지 않기 때문에, 저장한 순서를 유지하고자 한다면, <code class=\"language-text\">LinkedHashSet</code>을 사용하여 저장순서를 유지할 수 있습니다. </li>\n</ul>\n</li>\n<li>\n<p>TreeSet</p>\n<ul>\n<li>이진 탐색 트리의 일종인 레드-블랙트리로 구현된 컬렉션 클래스 입니다. </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"map-interface\" style=\"position:relative;\"><a href=\"#map-interface\" aria-label=\"map interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map Interface</h2>\n<p><code class=\"language-text\">Map</code>은 key-value의 형태로 요소를 저장하는 인터페이스입니다. 중복된 key를 허용하지 않고, 각 키는 하나의 값에 대응됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>Type &#x26; Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void clear()</td>\n<td>모든 mapping을 삭제합니다</td>\n</tr>\n<tr>\n<td>boolean containsKey(Object key)</td>\n<td>해당하는 key가 존재하는지 확인합니다</td>\n</tr>\n<tr>\n<td>boolean containsValue(Object value)</td>\n<td>해당하는 value가 존재하는지 확인합니다</td>\n</tr>\n<tr>\n<td>Set&#x3C;Map.Entry&#x3C;K,V>> enrtySet</td>\n<td>저장된 key-value를 key-value형태의 Set으로 반환합니다</td>\n</tr>\n<tr>\n<td>Set<K> keySet()</td>\n<td>저장된 key들의 set을 반환합니다.</td>\n</tr>\n<tr>\n<td>V put(K key, V value)</td>\n<td>key-value를 추가합니다</td>\n</tr>\n<tr>\n<td>void putAll(Map&#x3C;K,V> m)</td>\n<td>map의 모든 key-value를 추가합니다</td>\n</tr>\n<tr>\n<td>V\tremove(Object key)</td>\n<td>키값에 대응되는 key-value가 존재할 경우 삭제합니다</td>\n</tr>\n<tr>\n<td>V get(Object key)</td>\n<td>키값에 대응되는 값을 반환합니다</td>\n</tr>\n<tr>\n<td>int size()</td>\n<td>key-value쌍의 개수를 반환합니다.</td>\n</tr>\n<tr>\n<td>Collection<V>\tvalues()</td>\n<td>map의 모든 value를 반환합니다.</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">Map</code>은 다음의 5개 구현 클래스를 가집니다</p>\n<ul>\n<li>\n<p>HashMap</p>\n<ul>\n<li>해싱을 사용하여 많은 양의 데이터를 검색하는데 좋은 성능을 보입니다.</li>\n</ul>\n</li>\n<li>EnumMap</li>\n<li>LinkedHashMap</li>\n<li>WeakHashMap</li>\n<li>\n<p>TreeMap</p>\n<ul>\n<li>이진 탐색트리의 형태로 탐색과 정렬에 적합한 클래스입니다.</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">Map</code>은 다음과 같이 3개의 확장 인터페이스를 가집니다.</p>\n<ul>\n<li>SortedMap</li>\n<li>NavigableMap</li>\n<li>ConcurrentMap</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>Java의 정석</li>\n<li><a href=\"https://docs.oracle.com/javase/7/docs/api/\">https://docs.oracle.com/javase/7/docs/api/</a></li>\n<li><a href=\"https://www.programiz.com/java-programming\">https://www.programiz.com/java-programming</a></li>\n</ul>","frontmatter":{"title":"[Java] Collection Framework","date":"January 08, 2022"}}},"pageContext":{"slug":"/Java/collectionFramework/","previous":{"fields":{"slug":"/Java/abstract_interface/"},"frontmatter":{"title":"[Java] 추상클래스와 인터페이스"}},"next":{"fields":{"slug":"/Java/StringBufferStringBuilder/"},"frontmatter":{"title":"[Java] StringBuilder vs StringBuffer"}}}}}