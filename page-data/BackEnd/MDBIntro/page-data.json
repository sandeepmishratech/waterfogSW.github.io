{"componentChunkName":"component---src-templates-blog-post-js","path":"/BackEnd/MDBIntro/","result":{"data":{"site":{"siteMetadata":{"title":"For The Record","author":"San Kim","siteUrl":"https://waterfogsw.github.io","comment":{"disqusShortName":"","utterances":"waterfogSW/waterfogSW.github.io"}}},"markdownRemark":{"id":"5c594d09-ca20-51bc-b468-ebce20991983","excerpt":"title: ”MongoDB GridFS”\n MongoDB의 공식문서를 참고하여 작성하였습니다. MongoDB는 레코드를 BSON(Binary JSON)형태의 Document를 사용하는 NoSQL데이터베이스입니다. Document Database SQL Record MongoDB Document Key : Value 형태 여기서 name, age, status는 field이며 옆의 값들은 value로 field:value의 형태로 되어있습니다.  Native data types Document…","html":"<p>title: ”[MongoDB] GridFS”\n<br></p>\n<blockquote>\n<p>MongoDB의 <a href=\"https://docs.mongodb.com/manual/introduction/#key-features\">공식문서</a>를 참고하여 작성하였습니다.</p>\n</blockquote>\n<p>MongoDB는 레코드를 BSON(Binary JSON)형태의 Document를 사용하는 NoSQL데이터베이스입니다.</p>\n<h2 id=\"document-database\" style=\"position:relative;\"><a href=\"#document-database\" aria-label=\"document database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Document Database</h2>\n<h3 id=\"sql-record\" style=\"position:relative;\"><a href=\"#sql-record\" aria-label=\"sql record permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL Record</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Name    age  number      satus\nsan     25   9273723723  A</code></pre></div>\n<h3 id=\"mongodb-document\" style=\"position:relative;\"><a href=\"#mongodb-document\" aria-label=\"mongodb document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MongoDB Document</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"san\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>Key : Value 형태</p>\n<ul>\n<li>여기서 name, age, status는 field이며 옆의 값들은 value로 field:value의 형태로 되어있습니다. </li>\n</ul>\n</li>\n<li>\n<p>Native data types</p>\n<ul>\n<li>Document의 데이터 타입은 다양한 프로그래밍 언어의 native data types을 지원합니다.</li>\n</ul>\n</li>\n<li>\n<p>Embedded documents &#x26; arrays</p>\n<ul>\n<li>각 필드의 값들은 document, arrays, arrays of documents도 될 수 있습니다. </li>\n<li>이렇게 document내에 document 또는 array가 구성되어있는것을 <code class=\"language-text\">Embedded documents</code>, <code class=\"language-text\">Embedded array</code>라고 하는데 이러한 Embed(삽입)를 잘 활용하면 오버헤드가 큰 join연산을 줄일 수 있습니다</li>\n</ul>\n</li>\n<li>\n<p>Dynamic schema supports</p>\n<ul>\n<li>동적 스키마(Document, Collection)를 지원하여 다형성을 지원합니다. 동적 스키마란 Collection내의 문서들이 여러 형태의 데이터 타입을 지원하는것을 의미합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"collectionviewson-demand-materialized-views\" style=\"position:relative;\"><a href=\"#collectionviewson-demand-materialized-views\" aria-label=\"collectionviewson demand materialized views permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection/Views/On-Demand Materialized Views</h3>\n<p>MongoDB는 document들을 <code class=\"language-text\">collection</code>에 저장합니다. collection은 RDBMS의 table과 비슷한 개념입니다. </p>\n<p>추가적으로 다른 collection이나 view로 부터 Read-only View나 On-Demand Materialized Views를 만드는것을 지원합니다.</p>\n<h2 id=\"key-features\" style=\"position:relative;\"><a href=\"#key-features\" aria-label=\"key features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Features</h2>\n<h3 id=\"high-performance\" style=\"position:relative;\"><a href=\"#high-performance\" aria-label=\"high performance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Performance</h3>\n<ul>\n<li>임베디드 데이터 모델(Embedded documents, arrays)을 통해 데이터 베이스 시스템에서의 I/O횟수를 줄입니다</li>\n<li>인덱스를 통한 빠른 쿼리를 제공합니다.</li>\n</ul>\n<h3 id=\"rich-query-language\" style=\"position:relative;\"><a href=\"#rich-query-language\" aria-label=\"rich query language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rich Query Language</h3>\n<ul>\n<li>필터링, 수집, 정렬, 정규표현식 등 다양한 종류의 쿼리문을 지원합니다.</li>\n</ul>\n<h3 id=\"high-availability\" style=\"position:relative;\"><a href=\"#high-availability\" aria-label=\"high availability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Availability</h3>\n<ul>\n<li>같은 그룸의 여러 MongoDB서버에 데이터 복제본을 저장하여 Redundancy를 제공하며 데이터 가용성을 높입니다. </li>\n</ul>\n<h3 id=\"horizontal-scalability\" style=\"position:relative;\"><a href=\"#horizontal-scalability\" aria-label=\"horizontal scalability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Horizontal Scalability</h3>\n<ul>\n<li><a href=\"https://docs.mongodb.com/manual/sharding/#std-label-sharding-introduction\">Sharding</a>을 통해 높은 데이터 처리량과 매우 큰 데이터에 대한 배포를 지원합니다.</li>\n</ul>\n<h3 id=\"support-for-multiple-storage-engines\" style=\"position:relative;\"><a href=\"#support-for-multiple-storage-engines\" aria-label=\"support for multiple storage engines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for Multiple Storage Engines</h3>\n<ul>\n<li>\n<p>MongoDB는 다음의 <a href=\"https://docs.mongodb.com/manual/core/storage-engines/\">두가지 스토리지 엔진</a>을 제공합니다</p>\n<ul>\n<li>WiredTiger Storage Engine (including support for Encryption at Rest)</li>\n<li>In-Memory Storage Engine.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"rdbms-vs-mongodb\" style=\"position:relative;\"><a href=\"#rdbms-vs-mongodb\" aria-label=\"rdbms vs mongodb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RDBMS vs MongoDB</h2>\n<table>\n<thead>\n<tr>\n<th>RDBMS</th>\n<th>MongoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Table</td>\n<td>Collection</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>Primary Key</td>\n<td>_id field</td>\n</tr>\n<tr>\n<td>Join</td>\n<td>Embedded, Link</td>\n</tr>\n<tr>\n<td>Group by</td>\n<td>Aggregation</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"[MongoDB] Introduction","date":"July 12, 2021"}}},"pageContext":{"slug":"/BackEnd/MDBIntro/","previous":{"fields":{"slug":"/CS/BloomFilter/"},"frontmatter":{"title":"[DataStructure] Bloom filter"}},"next":{"fields":{"slug":"/OpenSource/YCSB/"},"frontmatter":{"title":"[YCSB] Introduction"}}}}}